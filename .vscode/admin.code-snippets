{
  "defns": {
    "scope": "scss",
    "prefix": "defns",
    "body": [
      "@use '/@/styles/var.scss';",
      "",
      "\\$prefixCls: #{var.\\$namespace}-$1;",
      "",
      ".#{\\$prefixCls} {",
      "",
      "}"
    ],
    "description": "namespace scss define"
  },
  "defapi": {
    "scope": "typescript",
    "prefix": "defapi",
    "body": [
      "import { defHttp } from '/@/utils/http/axios'",
      "",
      "export const Api = {",
      "  list: '$1',",
      "  add: '',",
      "  update: '',",
      "  delete: '',",
      "}"
    ],
    "description": "permission api define"
  },
  "defreq": {
    "scope": "typescript",
    "prefix": "defreq",
    "body": [
      "export async function $1Request(): Promise<void> {",
      "  return await defHttp.$2({ url: Api.$3 })",
      "}"
    ],
    "description": "define api request"
  },
  "defformdlg": {
    "scope": "vue",
    "prefix": "defformdlg",
    "body": [
      "<template>",
      "  <BasicDialog @register=\"registerDialog\" @confirm=\"submit\" :title=\"'$1'\">",
      "    <BasicForm",
      "      :schemas=\"schemas\"",
      "      :show-action-button-group=\"false\"",
      "      @submit=\"handleSubmit\"",
      "      @register=\"registerForm\"",
      "    />",
      "  </BasicDialog>",
      "</template>",
      "",
      "<script setup lang=\"ts\">",
      "import type { FormSchema } from '/@/components/Form'",
      "",
      "import { BasicDialog, useDialogInner } from '/@/components/Dialog'",
      "import { BasicForm, useForm } from '/@/components/Form'",
      "import { ref } from 'vue'",
      "",
      "defineEmits(['register'])",
      "",
      "const [registerForm, { submit, setProps: setFormProps }] = useForm()",
      "const [registerDialog, { setProps: setDialogProps, closeDialog }] = useDialogInner()",
      "",
      "async function handleSubmit(res: Recordable) {",
      "  try {",
      "    setDialogProps({ confirmBtnProps: { loading: true } })",
      "    setFormProps({ disabled: true })",
      "    console.log(res)$2",
      "",
      "    closeDialog()",
      "  } finally {",
      "    setDialogProps({ confirmBtnProps: { loading: false } })",
      "    setFormProps({ disabled: false })",
      "  }",
      "}",
      "",
      "const schemas = ref<FormSchema[]>([])",
      "</script>",
      ""
    ],
    "description": "define form dialog template"
  }
}
